import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def test_keyboard_login():
    USERNAME = "jobins"
    PASSWORD = "g4vrh5vo5hqogd0dprfj)"

    # Initialize WebDriver with ChromeOptions
    options = Options()
    # options.add_argument("--headless")  # Uncomment for headless mode (no UI)
    driver = webdriver.Chrome(options=options)

    # Open the target webpage
    driver.get("https://recruit.release.jobins.net/")
    time.sleep(2)  # Wait for the page to load

    # Wait for the popup to appear (since it's modal, we wait for visibility)
    WebDriverWait(driver, 20).until(
        EC.visibility_of_element_located((By.TAG_NAME, "body"))
    )

    # Wait for the username field to be focused (since the popup contains it)
    WebDriverWait(driver, 20).until(
        EC.visibility_of_element_located((By.CSS_SELECTOR, "input[name='username']"))
    )

    # Assuming the popup focuses on the username field and is accessible:
    # Send keys directly to the username field
    username_field = driver.find_element(By.CSS_SELECTOR, "input[name='username']")
    username_field.send_keys(USERNAME)

    # Send keys to the password field
    password_field = driver.find_element(By.CSS_SELECTOR, "input[name='password']")
    password_field.send_keys(PASSWORD)

    # Wait a moment before clicking the Sign In button
    time.sleep(2)

    # Find and click the Sign In button (assuming it's also inside the popup)
    sign_in_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Sign In')]")
    sign_in_button.click()

    time.sleep(5)  # Wait for the form submission and the result

    # Verify login success (use your specific condition for checking successful login)
    assert "Dashboard" in driver.title  # Replace with the expected title or condition for successful login
    print("Login Successful using Dynamic Element Creation")

    # Close the browser
    driver.quit()

# Execute the test
if __name__ == "__main__":
    test_keyboard_login()

